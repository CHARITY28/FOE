#***************************************************************
#*******************************Factors***********************
#*#**************************************************************
#https://rpubs.com/odenipinedo/introduction-to-R
# Gen vector
gen_vector <- c("Male", "Female", "Female", "Male", "Male")

# Convert gen_vector to a factor
factor_gen_vector <- factor(gen_vector)

# Print out factor_gen_vector
factor_gen_vector

############Types of factors (Nominal, Ordinal) 
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector

# Temperature
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector

########################Factor levels
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)

# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female", "Male")

factor_survey_vector

####################Summarizing a factor
# Generate summary for survey_vector
summary(survey_vector)

# Generate summary for factor_survey_vector
summary(factor_survey_vector)


#######################Comparing nominal factors
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")

# Male
male <- factor_survey_vector[1]

# Female
female <- factor_survey_vector[2]


#######################Ordered (ordinal)  factors
# Create speed_vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")

# Add your code below
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))

# Print factor_speed_vector
factor_speed_vector

summary(factor_speed_vector)

##########################Comparing ordered factors (ordinal)

# Create factor_speed_vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))

# Factor value for second data analyst
da2 <- factor_speed_vector[2]

# Factor value for fifth data analyst
da5 <- factor_speed_vector[5]

# Is data analyst 2 faster data analyst 5?
da2 > da5


#***************************************************************
#*******************************Data Frame***********************
#*#**************************************************************
# Print out built-in R data frame
mtcars 

# Call head() on mtcars
head(mtcars)

# Investigate the structure of mtcars
str(mtcars)

############################# Creating your own dataset ################

# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)

# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df



############################Selecting data from a data frame ##########

# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]

# Print out data for Mars (entire fourth row)
planets_df[4, ]

# Select first 5 values of diameter column
planets_df[1:5, "diameter"]

# Select the rings variable from planets_df
rings_vector <- planets_df$rings

# Print out rings_vector
rings_vector


# Adapt the code to select all columns for planets with rings
planets_df[rings_vector, ]

# Adapt the code to select all columns for planets without rings
planets_df[rings_vector == FALSE, ]

# Select planets with diameter < 1, subset(my_df, subset = some_condition)
subset(planets_df, diameter < 1)

# Using Which
#######Use which command for select subset
(selection_vector <- which(planets_df$diameter > 0))

(planets_df_diameters<- planets_df[selection_vector,])


#################### Sorting 
# Examples with the order function in the console, order() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:

s1 <- c(5, 1, 15, 16)
order(s1)

s2 <- c(-5, 13.2, 42, -0.6)
order(s2)

# A sort on the diameter column. Use order() to create positions, 
positions <-  order(planets_df$diameter)

# Use positions to sort planets_df
planets_df[positions,]


#################################Load Data set########## 

obesity_df <- read.csv("/Users/serinatiani/Obesity.csv")

#  first few rows of your data
(head(obesity_df))

#  last few rows of your data
(tail(obesity_df))
# Generate a summary dataset
summary(obesity_df)

# Generate a summary for one column
summary(obesity_df$Age)

# Generate a summary for set of  columns 
# Generate a summary of the Type, horsepower, and weight
summary(obesity_df[c("Age", "Height")])


#**************************************************
#******************* Lists ************************
#**************************************************

#Creating a list

#Let us create our first list! To construct a list you use the function list():
# Vector with numerics from 1 up to 10
my_vector <- 1:10 

# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)

# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]

# Adapt list() call to give the components names
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)

# Print out my_list
my_list

##############################

mov <- "The Shining"
act <- c("Jack Nicholson", "Shelley Duvall", "Danny Lloyd", "Scatman Crothers", "Barry Nelson")
comments <- c("Best Horror Film I Have Ever Seen", "A truly brilliant and scary film from Stanley Kubrick", "A masterpiece of psychological horror")
rev <- data.frame(scores = c(4.5, 4.0, 5.0), sources = c("IMDb1", "IMDb2", "IMDb3"), comments = comments)

# The variables mov, act and rev are available

# Finish the code to build shining_list
shining_list <- list(moviename = mov, actors = act, reviews = rev)

shining_list[[2]][1]
shining_list[["actors"]][1]
shining_list$actors[1]

############ Mathematical and Logical Operation

#Mean 
mean_Height <- mean(obesity_df$Height)
#sum
sum_Height <- sum(obesity_df$Height)
#########################Selecting 
#  (row 1, column 3)
obesity_df[1,3]

# (entire fourth row)
obesity_df[4, ]
#***************************************************************
#*******************************Relational Operations***********************
#*#**************************************************************
#Equality

TRUE != FALSE
"Rchitect" != "rchitect"
# Comparison of logicals
TRUE == FALSE
# Comparison of numerics
-6 * 14 != 17 - 101
# Comparison of character strings
"useR" == "user"
# Compare a logical with a numeric
TRUE == 1

#Greater and less than
# Comparison of numerics
-6 * 5 + 2 >= -10 + 1

# Comparison of character strings

"raining" <= "raining dog"

# Comparison of logicals
TRUE > FALSE

#Compare vectors

# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Popular days
linkedin > 15

# Quiet days
linkedin <= 5

# LinkedIn more popular than Facebook
linkedin > facebook

#Compare matrices

# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)

# When does views equal 13?
views == 13

# When is views less than or equal to 14?
views <= 14

#***************************************************************
#*******************************Logical Operators***********************
#***************************************************************

# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1)

# Is last under 5 or above 10?
last < 5 | last > 10

# Is last between 15 (exclusive) and 20 (inclusive)?
last > 15 & last <= 20

# The social data (linkedin, facebook, views) has been created for you

# linkedin exceeds 10 but facebook below 10
linkedin > 10 & facebook < 10

# When were one or both visited at least 12 times?
linkedin >= 12 | facebook >= 12

# When is views between 11 (exclusive) and 14 (inclusive)?
views > 11 & views <= 14

####################Negative

!True
!(5>3)
!!FALSE

#***************************************************************
#*******************************If Statment ***********************
#*#**************************************************************

############If Statment 
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Examine the if statement for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
}

# Write the if statement for num_views
if (num_views > 15) {
  print("You are popular!")
}

# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

#########################################Add an else
# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else {
  print("Unknown medium")
}

######################Customize further: else if

# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else if (medium == "Facebook") {
  # Add code to print correct string when condition is TRUE
  print("Showing Facebook information")
} else {
  print("Unknown medium")
}

####Take control! What the output would be ???????????

# Variables related to your last day of recordings
li <- 15
fb <- 9

# Code the control-flow construct
if (li >= 15 & fb >= 15) {
  sms <- 2 * (li + fb)
} else if (li < 10 & fb < 10) {
  sms <- 0.5 * (li + fb)
} else {
  sms <- li + fb
}

# Print the resulting sms to the console
sms

#########While loop

# Initialize the speed variable
speed <- 64

# Code the while loop
while (speed > 30) {
  print("Slow down!")
  speed <- speed - 7
}

##For loop over vector

# The linkedin vector has already been defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)

# Loop version 1
for (li in linkedin) {
  print(li)
}

# The nyc list is already specified
nyc <- list(pop = 8405837, 
            boroughs = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island"), 
            capital = FALSE)

# Loop version 1
for (info in nyc) {
  print(info)
}


#***************************************************************
#*******************************Function documentation ***********************
#*#**************************************************************

####################Build in 
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate average number of views
avg_li <- mean(x = linkedin)
avg_fb <- mean(facebook)

# Inspect avg_li and avg_fb
avg_li



# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate the mean of the sum
avg_sum <- mean(linkedin + facebook)

# Calculate the trimmed mean of the sum
avg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2)

# Inspect both new variables
avg_sum

####################Write your own function

# Create a function pow_two()
pow_two <- function(x) {
  x ^ 2
}

# Use the function
pow_two(12)


# Create a function sum_abs()
sum_abs <- function(x, y) {
  abs(x) + abs(y)
  abs(x) - abs(y)
  
}

# Use the function
sum_abs(-2, 3)


###########Without parameters 
# Define the function hello()
hello <- function() {
  print("Hi there!")
  TRUE
}

# Call the function hello()
hello()

