#################################### Question 1 #################################### 

# a. Calculate the total number of 6-character passwords with and without replacement
# with replacement: 26 LC + 26 UC + 10 digits = 62
a <- 62^6 
# without replacement
b <- prod(62:(62-5)) 

# b. Calculate the ratio of passwords without replacement to with replacement
b/a

# c. Calculate the time required to try 100 million passwords with and without replacement (in hours)
(a / 100000000) / 3600
(b / 100000000) / 3600

# d. Calculate the total number of passwords if the first character must be a letter (52 options) and the rest must include at least one number
# Total number of passwords without numbers for the last 5 characters
52^5
# Total number of passwords for 5 digits with numbers
62^5
# Number of valid passwords
c <- 52 * (62^5 - 52^5)
# Time required in hours to try 100 million passwords
(c / 100000000) / 3600

#################################### Question 2 #################################### 

# a. Calculate the probability that a specific sequence of 12 processors operates correctly if the probability of each processor operating is 1/12
prod(12:1) / 12^12

# b. Recursive function to find the minimum number of processors required to achieve a probability of at least 0.9
opcpu <- function(p, q) {
  if (p < q) {
    paste("The number of processors should be", q, "or more")
  } else {
    prob <- prod(p:(p-(q-1))) / p^q
    if (prob < 0.9) {
      opcpu(p + 1, q)
    } else {
      p
    }
  }
}
opcpu(2, 3)

# OR: Iterative function to achieve the same goal
opcpu <- function(p, q) {
  if (p < q) {
    paste("Number of CPUs should equal or be greater than", q)
  } else {
    prob <- prod(p:(p-(q-1))) / p^q
    while (prob < 0.9) {
      p <- p + 1
      prob <- prod(p:(p-(q-1))) / p^q
    }
    p
  }
}
opcpu(9, 9)

#################################### Question 3 #################################### 

# a. Simulate rolling a die and calculate the proportion of sixes for different numbers of rolls
set.seed(8)
s <- c(1, 2, 3, 4, 5, 6)

n <- 10
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

n <- 100
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

n <- 1000
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

n <- 5000
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

n <- 10000
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

n <- 20000
def <- sample(s, size = n, replace = TRUE)
prop.table(table(def))[6]

# b. Function to calculate the cumulative proportion of sixes over a number of trials
prodef <- function(n, p = 1/6) {
  outcomes <- c(0, 1)
  probabilities = c(1 - p, p)
  trials <- sample(outcomes, n, replace = TRUE, prob = probabilities)
  cum_sum = cumsum(trials)
  index = c(1:n)
  prob = cum_sum / index
  return(data.frame(index, prob))
}

# Plot the cumulative proportion of sixes over 500 trials
set.seed(8)
data <- prodef(500)

plot(data$index, data$prob, type = "l", xlab = "Trial number", ylab = "prob")
abline(h = 1/6, col = "red", lwd = 2)
